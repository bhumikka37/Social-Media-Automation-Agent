{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "formTitle": "What content ideas you want to generate?",
        "formDescription": "Accepts Content Idea from user",
        "formFields": {
          "values": [
            {
              "fieldLabel": "What is your name?",
              "requiredField": true
            },
            {
              "fieldLabel": "content_ideas",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -2544,
        -832
      ],
      "id": "ID",
      "name": "On form submission",
      "webhookId": "dec8f317-eed4-47aa-81df-4d2ebe3dd5d1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.content_ideas.replace(/^\"|\"$/g, '') }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are an elite prompt-generation AI focused on crafting intense, hyper-detailed first-person experiences.Your outputs must never include quotation marks.  Skip any scene that involves waking up.  Avoid clothing-related actions entirely.  Exclude any mention of foot movement (e.g. stepping, walking).  Prioritize dramatic, unique, and cinematic moments over common daily routines.\n\nGuidelines:Each output is written from a first-person perspective and is designed to place the viewer inside the moment.  Use strong physical verbs like yanking, swinging, lifting, smashing, bracing, sprinting, dodging.  Include immersive words such as POV, first-person view, or GoPro-style.  \nKeep every output between 5 and 10 words long.  Never use quotation marks under any circumstance.  Focus on ultra-realistic, cinematic, high-stakes scenes that trigger strong visual or emotional imagery.  All prompts in a sequence should logically build across a single day, from start to finish.  Avoid vague or reflective thoughts—stick to tangible, physical actions and moments."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -2272,
        -768
      ],
      "id": "ID",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2464,
        -544
      ],
      "id": "ID",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Mx3vpPwzan7j0hMq",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "numberOfItems": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
      "typeVersion": 1,
      "position": [
        -2256,
        -496
      ],
      "id": "ID",
      "name": "Item List Output Parser"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "Your API"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ \n`{\n    \"model\": \"Qubico/flux1-dev\",\n    \"task_type\": \"txt2img\",\n    \"input\": {\n        \"prompt\": \"${$json.message.content}\",\n        \"width\": 540,\n        \"height\": 960\n    }\n}` \n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1584,
        -496
      ],
      "id": "ID",
      "name": "Text to Image"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1264,
        -464
      ],
      "id": "ID",
      "name": "wait 3 mins",
      "webhookId": "ID"
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "API KEY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        -512
      ],
      "id": "ID",
      "name": "Get Image"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "API KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n    \"model\": \"kling\",\n    \"task_type\": \"video_generation\",\n    \"input\": {\n        \"prompt\": \"{{ $json.data.input.prompt }}\",\n        \"negative_prompt\": \"bad quality\",\n        \"cfg_scale\": 0.65,\n        \"duration\": 5,\n        \"aspect_ratio\": \"1:1\",\n        \"image_url\": \"{{ $json.data.output.image_url }}\",\n        \"camera_control\": {\n            \"type\": \"simple\",\n            \"config\": {\n                \"horizontal\": 0,\n                \"vertical\": 0,\n                \"pan\": 0,\n                \"tilt\": 0,\n                \"roll\": 0,\n                \"zoom\": 0\n            }\n        },\n        \"mode\": \"std\"\n    },\n    \"config\": {}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2112,
        -160
      ],
      "id": "ID",
      "name": "Image to Video"
    },
    {
      "parameters": {
        "amount": 8
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1840,
        -160
      ],
      "id": "ID",
      "name": "Wait 8 mins",
      "webhookId": "ID"
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "API KEY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -736,
        -144
      ],
      "id": "ID",
      "name": "Get Video"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an advanced prompt-generation AI specializing in expanding short POV (point-of-view) image prompt ideas into detailed, hyper-realistic prompts optimized for image-generation models like Flux and MidJourney. Your task is to take a brief input and transform it into a rich, cinematic, immersive prompt that strictly adheres to a first-person perspective, making the viewer feel as if they are physically present in the scene. This is the short prompt idea you need to expand upon: {{ $json.text }}\n\nEvery prompt has two sections:\n1. In the foreground, show and describe the hands, limbs, or feet of the viewer. Must start with \"First person view POV GoPro shot of [relevant limb]...\"\n2. In the background, describe the scenery. Must start with \"In the background, [describe scenery]\"\n\nMost Important Guidelines:- Every image must be a first-person perspective shot—the viewer must feel like they are experiencing the moment themselves, not just observing it.- A visible limb (hands or feet) must always be present and actively engaged in the environment—whether gripping, reaching, pushing, lifting, or interacting in a natural way.- The framing must be dynamic and interactive, mimicking real-world human vision—ensuring motion, depth, and immersion similar to a GoPro or head-mounted camera shot. \n\nOther Key Guidelines:- Full-body awareness: The prompt should subtly remind the viewer that they have a physical presence—mentioning sensations like weight shifting, breath fogging in the cold, or fingers trembling from adrenaline.\nSensory depth: The prompt should engage multiple senses (sight, touch, temperature, sound, even smell) to heighten realism.- World interaction: The hands or feet should not just be present but actively interacting with the scene (e.g., clutching, adjusting, stepping forward, brushing against surfaces).- Keep prompts under 1000 characters in a single, cinematic sentence with no extra formatting, explanations, or unnecessary output. "
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2080,
        -496
      ],
      "id": "ID",
      "name": "Generate Prompts",
      "credentials": {
        "openAiApi": {
          "id": "Mx3vpPwzan7j0hMq",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $json.data.task_id.replace(/[:.]/g,'-') + '-voice.mp3'}}\n",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "value",
          "mode": "list",
          "cachedResultName": "n8n-assessment",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1NSHoKr69t594exhFd3Z7u4CEfvXMfHKj"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -128,
        -64
      ],
      "id": "ID",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "y0Y8WxMhSggHSHJT",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        624,
        -192
      ],
      "id": "ID",
      "name": "Merge Video Content"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    scene_titles: items.map(item => $(\"On form submission\").first().json.content_ideas),\n    video_urls : items.map(item => item.json.data.output.video_url),\n    sounds_urls : items.map(item => item.json.webContentLink)\n  } \n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        176
      ],
      "id": "ID",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.creatomate.com/v1/renders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"template_id\": \"d4f2cdbc-34ec-46d5-8da1-1a74b61a6d6d\",\n   \"modifications\": {      \n      \"Audio-1.source\": \"{{\n      $json.sounds_urls[0].replace(/^\"|\"$/g, '') }}\",\n      \"Audio-2.source\": \"{{\n      $json.sounds_urls[0].replace(/^\"|\"$/g, '') }}\",\n      \"Video-1.source\": \"{{\n      $json.video_urls[0].replace(/^\"|\"$/g, '') }}\",\n      \"Video-2.source\": \"{{\n      $json.video_urls[0].replace(/^\"|\"$/g, '') }}\",\n      \"Text-1.text\": \"{{\n      $json.scene_titles[0].replace(/^\"|\"$/g, '') }}\",\n      \"Text-2.text\": \"{{\n      $json.scene_titles[0].replace(/^\"|\"$/g, '') }}\"\n      \n   }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        448,
        192
      ],
      "id": "ID",
      "name": "Render Video"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        704,
        224
      ],
      "id": "ID",
      "name": "Wait 2 mins",
      "webhookId": "ID"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        480
      ],
      "id": "ID",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "={{ $('On form submission').item.json['What content ideas you want to generate?'] }}",
        "regionCode": "IN",
        "categoryId": "24",
        "options": {
          "description": "={{ $('On form submission').item.json['What content ideas you want to generate?'] }}"
        }
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        144,
        496
      ],
      "id": "ID",
      "name": "Upload a video",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "ID",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "62f46376-52c5-4702-b744-7b9d2fc519fc",
              "leftValue": "={{ $json.uploadId }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        320,
        512
      ],
      "id": "ID",
      "name": "If"
    },
    {
      "parameters": {
        "url": "https://youtube.googleapis.com/youtube/v3/videos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        704,
        480
      ],
      "id": "ID",
      "name": "Analytics"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/JBFqnCBsd6RMkjVDRZzb?output_format=mp3_44100_128",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "API KEY"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"text\": \"no voice {{ $('Generate Prompts').first().json.message.content.substring(0,440) }}\",\n  \"duration_seconds\": 5,\n  \"prompt_influence\": 0.6\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -384,
        -160
      ],
      "id": "EllevenLabsID",
      "name": "EllevenLabs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ID",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "=completed",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        -544
      ],
      "id": "ID",
      "name": "If status != succeeded"
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "API KEY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1056,
        -464
      ],
      "id": "ID",
      "name": "Check status"
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "API KEY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1440,
        -160
      ],
      "id": "ID",
      "name": "Check status-Img-to-Video"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ID",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1088,
        -160
      ],
      "id": "ID",
      "name": "If1"
    }
  ],
  "pinData": {},
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Item List Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Generate Prompts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Video Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text to Image": {
      "main": [
        [
          {
            "node": "wait 3 mins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait 3 mins": {
      "main": [
        [
          {
            "node": "Check status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Image": {
      "main": [
        [
          {
            "node": "Image to Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image to Video": {
      "main": [
        [
          {
            "node": "Wait 8 mins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 8 mins": {
      "main": [
        [
          {
            "node": "Check status-Img-to-Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video": {
      "main": [
        [
          {
            "node": "EllevenLabs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Video Content",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Prompts": {
      "main": [
        [
          {
            "node": "Text to Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Merge Video Content",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Video Content": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Render Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Video": {
      "main": [
        [
          {
            "node": "Wait 2 mins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2 mins": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Upload a video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload a video": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EllevenLabs": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If status != succeeded": {
      "main": [
        [
          {
            "node": "wait 3 mins",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check status": {
      "main": [
        [
          {
            "node": "If status != succeeded",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check status-Img-to-Video": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Wait 8 mins",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ID",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ID"
  },
  "id": "ID",
  "tags": []
}
